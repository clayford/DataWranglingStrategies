library(shiny)

parameter_tabs <- tabsetPanel(
    id = "params",
    type = "hidden",
    tabPanel("normal",
             sliderInput("mean", "mean", value = 0, min = -2, max = 2),
             sliderInput("sd", "standard deviation", min = 0.2 , max = 3, 
                          value = 1, step = 0.1),
             helpText("The mean is the peak of the hump. The standard deviation is
                      where the curve changes from concave up to concave down.")
    ),
    tabPanel("t",  
             sliderInput("df", "df", value = 5, min = 2, max = 20),
             helpText("A random sample from a Normal distribution with unknown 
                      mean and variance, rescaled to have mean 0 and variance 1, 
                      can be approxinated with a t distribution. The degrees of
                      freedom is the sample size minus 1. The black line is
                      the standard Normal distribution for comparison. Notice as 
                      the sample gets bigger (ie, more degrees of freedom) the
                      t distribution becomes virtually indistinguishable from
                      the standard Normal.")
    ),
    tabPanel("F",
             sliderInput("df1", "numerator DF", value = 2, min = 1, max = 9,
                         step = 1),
             sliderInput("df2", "denominator DF", value = 10, min = 10, max = 40,
                         step = 1),
             helpText("F distributions arise in comparing variability between
                      populations, most often in Analysis of Variance (ANOVA). 
                      In ANOVA, the numerator degrees of freedom is number of
                      groups minus 1. The denominator degrees of freedom is 
                      sample size minus 1. The ratio of variance between groups
                      and variance within the sample can be approximated with
                      an F distribution. A large ratio is due to high variance
                      between groups, which provides evidence of different 
                      group means")
    ),
    tabPanel("chisquare",  
             sliderInput("r", "df", value = 5, min = 1, max = 30),
             helpText("Take a random sample of size n from a standard Normal
                      distribution. Square and sum the values. Repeat many, many 
                      times. The distribution of these values has a chi-square 
                      distribution with n degrees of freedom. The notion of
                      summing squared values arises in approximating variance of
                      samples. The degrees of freedom is the mean of the
                      distribution. Notice the chi-square converges to Normal as
                      the degrees of freedom increases.")
    )
)

# Define UI
ui <- fluidPage(

    # Application title
    titlePanel("Statistical Distributions"),

    # Sidebar with a slider input for number of bins 
    sidebarLayout(
        sidebarPanel(
            selectInput("dist", "Distribution", 
                        choices = c("normal", "t", "F", "chisquare")
            ),
            parameter_tabs,
        ),

        # Show a plot of the generated distribution
        mainPanel(
           plotOutput("distPlot")
        )
    )
)

# Define server logic required to draw a histogram
server <- function(input, output) {

    observeEvent(input$dist, {
        updateTabsetPanel(inputId = "params", selected = input$dist)
    })
    
    output$distPlot <- renderPlot({
        switch(input$dist,
               normal = curve(dnorm(x, input$mean, input$sd), 
                              from = -5, 
                              to = 5, 
                              xlab = "", ylab = "", ylim = c(0,2)),
               t = {curve(dnorm(x), from = -3, to = 3,
                          xlab = "", ylab = "", ylim = c(0,0.5))
                   curve(dt(x, input$df), col = "blue", add = TRUE)},
               F = curve(df(x, df1 = input$df1, df2 = input$df2), 
                         from = 0, to = 3, ylim = c(0,2), xlab = "", ylab = ""),
               chisquare = curve(dchisq(x, df = input$r), from = 0, 
                                 to = 2*input$r, xlab = "", ylab = "")

        )
    })
}

# Run the application 
shinyApp(ui = ui, server = server)
